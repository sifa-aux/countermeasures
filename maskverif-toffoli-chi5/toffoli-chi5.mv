(* This is a comment *)

proc SIFA_CHI:

(* The algorithm takes 5 inputs each split in two shares *)
inputs: a[0:1], b[0:1], c[0:1], d[0:1], e[0:1]
 
(* It returns 5 outputs each split in two shares *)
outputs: aa[0:1], bb[0:1], cc[0:1], dd[0:1], ee[0:1]

(* R is a fresh random local to the algorithm *)
randoms: R;

r[0] := R;
r[1] := R;

(* pχ(r0,r1,e0,e1,a0,a1) *)

e[0]  = ~ e[0];
t0   := a[1] * e[0];   (* "bic %[T0], %[a1], %[e0]\n\t" \ *)
r[0]  = r[0] + t0;     (* "eor %[r0], %[r0], %[T0]\n\t" \ *)
t0    = a[0] * e[0];   (* "bic %[T0], %[a0], %[e0]\n\t" \ *)
r[0]  = r[0] + t0;     (* "eor %[r0], %[r0], %[T0]\n\t" \ *)
e[0]  = ~ e[0];

t0    = e[1] * a[1];   (* "and %[T0], %[e1], %[a1]\n\t" \ *)
r[1]  = r[1] + t0;     (* "eor %[r1], %[r1], %[T0]\n\t" \ *)
t0    = e[1] * a[0];   (* "and %[T0], %[e1], %[a0]\n\t" \ *)
r[1]  = r[1] + t0;     (* "eor %[r1], %[r1], %[T0]\n\t" \ *)

(* pχ(a0,a1,b0,b1,c0,c1) *)

b[0]  = ~ b[0];
t0    = c[1] * b[0];   (* "bic %[T0], %[c1], %[b0]\n\t" \ *)
a[0]  = a[0] + t0;     (* "eor %[a0], %[a0], %[T0]\n\t" \ *)
t0    = c[0] * b[0];   (* "bic %[T0], %[c0], %[b0]\n\t" \ *)
a[0]  = a[0] + t0;     (* "eor %[a0], %[a0], %[T0]\n\t" \ *)
b[0]  = ~ b[0];

t0    = b[1] * c[1];   (* "and %[T0], %[b1], %[c1]\n\t" \ *)
a[1]  = a[1] + t0;     (* "eor %[a1], %[a1], %[T0]\n\t" \ *)
t0    = b[1] * c[0];   (* "and %[T0], %[b1], %[c0]\n\t" \ *)
a[1]  = a[1] + t0;     (* "eor %[a1], %[a1], %[T0]\n\t" \ *)

(* pχ(c0,c1,d0,d1,e0,e1) *)

d[0]  = ~ d[0];
t0    = e[1] * d[0];   (* "bic %[T0], %[e1], %[d0]\n\t" \ *)
c[0]  = c[0] + t0;     (* "eor %[c0], %[c0], %[T0]\n\t" \ *)
t0    = e[0] * d[0];   (* "bic %[T0], %[e0], %[d0]\n\t" \ *)
c[0]  = c[0] + t0;     (* "eor %[c0], %[c0], %[T0]\n\t" \ *)
d[0]  = ~ d[0];

t0    = d[1] * e[1];   (* "and %[T0], %[d1], %[e1]\n\t" \ *)
c[1]  = c[1] + t0;     (* "eor %[c1], %[c1], %[T0]\n\t" \ *)
t0    = d[1] * e[0];   (* "and %[T0], %[d1], %[e0]\n\t" \ *)
c[1]  = c[1] + t0;     (* "eor %[c1], %[c1], %[T0]\n\t" \ *)

(* pχ(e0,e1,a0,a1,b0,b1) *)

a[0]  = ~ a[0];
t0    = b[1] * a[0];   (* "bic %[T0], %[b1], %[a0]\n\t" \ *)
e[0]  = e[0] + t0;     (* "eor %[e0], %[e0], %[T0]\n\t" \ *)
t0    = b[0] * a[0];   (* "bic %[T0], %[b0], %[a0]\n\t" \ *)
e[0]  = e[0] + t0;     (* "eor %[e0], %[e0], %[T0]\n\t" \ *)
a[0]  = ~ a[0];

t0    = a[1] * b[1];   (* "and %[T0], %[a1], %[b1]\n\t" \ *)
e[1]  = e[1] + t0;     (* "eor %[e1], %[e1], %[T0]\n\t" \ *)
t0    = a[1] * b[0];   (* "and %[T0], %[a1], %[b0]\n\t" \ *)
e[1]  = e[1] + t0;     (* "eor %[e1], %[e1], %[T0]\n\t" \ *)

(* pχ(b0,b1,c0,c1,d0,d1) *)

c[0]  = ~ c[0];
t0    = d[1] * c[0];   (* "bic %[T0], %[d1], %[c0]\n\t" \ *)
b[0]  = b[0] + t0;     (* "eor %[b0], %[b0], %[T0]\n\t" \ *)
t0    = d[0] * c[0];   (* "bic %[T0], %[d0], %[c0]\n\t" \ *)
b[0]  = b[0] + t0;     (* "eor %[b0], %[b0], %[T0]\n\t" \ *)
c[0]  = ~ c[0];

t0    = c[1] * d[1];   (* "and %[T0], %[c1], %[d1]\n\t" \ *)
b[1]  = b[1] + t0;     (* "eor %[b1], %[b1], %[T0]\n\t" \ *)
t0    = c[1] * d[0];   (* "and %[T0], %[c1], %[d0]\n\t" \ *)
b[1]  = b[1] + t0;     (* "eor %[b1], %[b1], %[T0]\n\t" \ *)

d[0]  = d[0] + r[0];   (* "eor %[d0], %[d0], %[r0]\n\t" \ *)
d[1]  = d[1] + r[1];   (* "eor %[d1], %[d1], %[r1]\n\t" \ *)

aa[0] = a[0];
aa[1] = a[1];
bb[0] = b[0];
bb[1] = b[1];
cc[0] = c[0];
cc[1] = c[1];
dd[0] = d[0];
dd[1] = d[1];
ee[0] = e[0];
ee[1] = e[1];

end (* proc SIFA_CHI *)

(* Set the verbosity level *)
verbose 1

(* Print circuit *)
print SIFA_CHI

(* Check probing security without glitches *)
noglitch Probing SIFA_CHI

(* Check probing security with glitches *)
(* Probing SIFA_CHI *)

